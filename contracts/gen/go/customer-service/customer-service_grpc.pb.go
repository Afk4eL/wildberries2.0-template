// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: customer-service/customer-service.proto

package customer_contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerService_GetCustomerProfile_FullMethodName    = "/customer_service.CustomerService/GetCustomerProfile"
	CustomerService_UpdateCustomerProfile_FullMethodName = "/customer_service.CustomerService/UpdateCustomerProfile"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	GetCustomerProfile(ctx context.Context, in *GetCustomerProfileRequest, opts ...grpc.CallOption) (*GetCustomerProfileResponse, error)
	UpdateCustomerProfile(ctx context.Context, in *UpdateCustomerProfileRequest, opts ...grpc.CallOption) (*UpdateCustomerProfileResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) GetCustomerProfile(ctx context.Context, in *GetCustomerProfileRequest, opts ...grpc.CallOption) (*GetCustomerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerProfileResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetCustomerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerProfile(ctx context.Context, in *UpdateCustomerProfileRequest, opts ...grpc.CallOption) (*UpdateCustomerProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerProfileResponse)
	err := c.cc.Invoke(ctx, CustomerService_UpdateCustomerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility.
type CustomerServiceServer interface {
	GetCustomerProfile(context.Context, *GetCustomerProfileRequest) (*GetCustomerProfileResponse, error)
	UpdateCustomerProfile(context.Context, *UpdateCustomerProfileRequest) (*UpdateCustomerProfileResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerServiceServer struct{}

func (UnimplementedCustomerServiceServer) GetCustomerProfile(context.Context, *GetCustomerProfileRequest) (*GetCustomerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerProfile not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerProfile(context.Context, *UpdateCustomerProfileRequest) (*UpdateCustomerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerProfile not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}
func (UnimplementedCustomerServiceServer) testEmbeddedByValue()                         {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_GetCustomerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetCustomerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerProfile(ctx, req.(*GetCustomerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_UpdateCustomerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerProfile(ctx, req.(*UpdateCustomerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer_service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerProfile",
			Handler:    _CustomerService_GetCustomerProfile_Handler,
		},
		{
			MethodName: "UpdateCustomerProfile",
			Handler:    _CustomerService_UpdateCustomerProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer-service/customer-service.proto",
}
